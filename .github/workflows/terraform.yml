name: 'Terraform'

on:
  push:
    branches: [ "*" ]

# Concurrency control to prevent simultaneous execution
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Setup terraform variables
      id: vars
      run: |-
        # Determine environment and branch hash
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          PROJECT="${{ vars.GCP_PROJECT }}"
          DATA_PROJECT="${{ vars.GCP_DATA_PROJECT }}"
          BRANCH_HASH=""
        else
          PROJECT="${{ vars.GCP_PROJECT }}-dev"
          DATA_PROJECT="${{ vars.GCP_DATA_PROJECT }}-dev"
          # Extract branch name and create hash
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          if [ -n "$BRANCH_NAME" ]; then
            BRANCH_HASH=$(echo -n "$BRANCH_NAME" | sha256sum | cut -c1-8)
            BRANCH_HASH="-${BRANCH_NAME}"
          else
            BRANCH_HASH=""
          fi
        fi
        
        cat > pipeline.auto.tfvars <<EOF
        region="${{ vars.GCP_REGION }}" 
        project="$PROJECT" 
        data-project="$DATA_PROJECT"
        branch-hash="$BRANCH_HASH"
        EOF
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }} 

    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}